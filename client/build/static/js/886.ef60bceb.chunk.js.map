{"version":3,"file":"static/js/886.ef60bceb.chunk.js","mappings":"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","sources":["Components/Logout.jsx","Components/profileOptions.jsx","Components/Contacts.jsx","Components/Welcome.jsx","Components/ChatInput.jsx","Components/ChatContainer.jsx","Pages/Chat.jsx"],"sourcesContent":["import React, {useContext} from 'react';\r\nimport styled from \"styled-components\";\r\nimport axios from 'axios'\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {BiPowerOff} from \"react-icons/bi\";\r\nimport { logoutRoute } from \"../config/APIRoutes\";\r\nimport {AuthContext} from \"../context/authContext\";\r\n\r\nfunction Logout() {\r\n    const navigate = useNavigate();\r\n    const {isAuthenticated, setIsAuthenticated} = useContext(AuthContext);\r\n    const handleClick = async () =>{\r\n        const id = await JSON.parse(\r\n            localStorage.getItem(\"chat-app-user\")\r\n        )._id;\r\n        const data = await axios.get(`${logoutRoute}/${id}`, {withCredentials: true});\r\n        if (data.status === 200) {\r\n            localStorage.clear();\r\n            setIsAuthenticated(false);\r\n            navigate(\"/login\");\r\n        }\r\n    }\r\n    return (\r\n        <Button onClick={handleClick}>\r\n            <BiPowerOff />\r\n            <p>Logout</p>\r\n        </Button>\r\n    );\r\n}\r\n\r\nconst Button = styled.div `\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    padding: 0.5rem;\r\n    border-radius: 0.5rem;\r\n    border: none;\r\n    cursor: pointer;\r\n    color: #21056c;\r\n    font-weight: bold;\r\n    text-decoration: none;\r\n    gap: 5px;\r\n\r\n    p:hover {\r\n        color: #d1d0d5;\r\n    }\r\n\r\n    svg {\r\n        font-size: 1.3rem;\r\n        color: #930606;\r\n    }\r\n`\r\nexport default Logout;","import React, {useState} from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport Logout from \"./Logout\";\r\nimport {LuMenu} from \"react-icons/lu\";\r\nimport styled from \"styled-components\";\r\n\r\nconst ProfileOptions = () => {\r\n    const [displayOptions, setDisplayOptions] = useState(false);\r\n    return (\r\n        <Container>\r\n            <div className=\"menu\" onClick={() => setDisplayOptions(!displayOptions)}>\r\n                <LuMenu style={{color: 'white', fontSize: '30px'}}/>\r\n            </div>\r\n\r\n            {displayOptions &&\r\n\r\n                <div className=\"options\">\r\n                    <Link to=\"/avatar\"><p>Change Avatar</p> </Link>\r\n                    <Link to=\"/setusername\"><p>Change username</p></Link>\r\n                    <Logout/>\r\n                </div>\r\n            }\r\n\r\n        </Container>\r\n\r\n    );\r\n};\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 15px;\r\n    width: 100%;\r\n    \r\n    \r\n\r\n    .menu {\r\n        cursor: pointer;\r\n    }\r\n\r\n    .options {\r\n        z-index: 2;\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        gap: 0.3rem;\r\n        border-radius: 0.5rem;\r\n        background-color: #7f6ccb;\r\n        position: absolute;\r\n        top: 8rem;\r\n        left: 8rem;\r\n        grid-column: 1 / -1;\r\n        \r\n        width: 19%;\r\n\r\n        a {\r\n            padding-top: 8px;\r\n            color: #21056c;\r\n            font-weight: bold;\r\n            text-decoration: none;\r\n\r\n            p:hover {\r\n                color: #d1d0d5;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n`\r\n\r\nexport default ProfileOptions;","import React, {useEffect, useState} from 'react';\r\nimport styled from \"styled-components\";\r\nimport logo from \"../assets/logo.png\"\r\nimport {Link} from \"react-router-dom\"\r\nimport Logout from \"./Logout\";\r\nimport ProfileOptions from \"./profileOptions\";\r\n\r\nfunction Contacts({contacts, currentUser, changeChat}) {\r\n    const [currentUserName, setCurrentUserName] = useState(undefined)\r\n    const [currentUserImage, setCurrentUserImage] = useState(undefined);\r\n    const [currentSelected, setCurrentSelected] = useState(undefined);\r\n\r\n    useEffect(() => {\r\n        if (currentUser) {\r\n            setCurrentUserImage(currentUser.avatarImage);\r\n            setCurrentUserName(currentUser.username);\r\n        }\r\n    }, [currentUser]);\r\n\r\n    const changeCurrentChat = (index, contact) => {\r\n        setCurrentSelected(index);\r\n        changeChat(contact);\r\n    }\r\n    return (\r\n        <>\r\n            {currentUserImage && currentUserName && (\r\n                <Container>\r\n                    <div className=\"brand\">\r\n                        <div className=\"menu\"><ProfileOptions/></div>\r\n                        <div className=\"brands\">\r\n                            <img src={logo} alt=\"Brand\"/>\r\n                            <h3>Snappy</h3>\r\n                        </div>\r\n\r\n                    </div>\r\n                    <div className=\"contacts\">\r\n                        {contacts.map((contact, index) => {\r\n                            return (\r\n                                <div className={`contact ${index === currentSelected ? \"selected\" : \"\"}  `} key={index}\r\n                                     onClick={() => {\r\n                                         changeCurrentChat(index, contact)\r\n                                     }}>\r\n                                    <div className=\"avatar\">\r\n                                        <img src={`data:image/svg+xml;base64,${contact.avatarImage}`} alt=\"avatar\"/>\r\n                                    </div>\r\n                                    <div className=\"username\">\r\n                                        <h3>{contact.username}</h3>\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                    <div className=\"current-user\">\r\n                        <div className=\"avatar\">\r\n                            <img src={`data:image/svg+xml;base64,${currentUserImage}`} alt=\"avatar\"/>\r\n                        </div>\r\n                        <div className=\"username\">\r\n                            <h1>{currentUserName}</h1>\r\n                        </div>\r\n\r\n                    </div>\r\n                </Container>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nconst Container = styled.div`\r\n    display: grid;\r\n    grid-template-rows: 10% 75% 15%;\r\n    overflow: hidden;\r\n    background-color: #080420;\r\n    .brand {\r\n        display: flex;\r\n        align-items: center;\r\n        gap: 1rem;\r\n        img {\r\n            height: 3rem;\r\n        }\r\n        h3 {\r\n            color: white;\r\n            text-transform: uppercase;\r\n        }\r\n        .brands {\r\n            margin-left: 1.5rem;\r\n            display: flex;\r\n            flex-direction: row;\r\n            align-items: center;\r\n        }\r\n        .menu {\r\n            margin-left: 1rem;\r\n\r\n        }\r\n    }\r\n    .contacts {\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        overflow: auto;\r\n        gap: 0.8rem;\r\n\r\n        &::-webkit-scrollbar {\r\n            width: 0.2rem;\r\n\r\n            &-thumb {\r\n                background-color: #ffffff39;\r\n                width: 0.1rem;\r\n                border-radius: 1rem;\r\n            }\r\n        }\r\n\r\n        .contact {\r\n            background-color: #ffffff34;\r\n            min-height: 5rem;\r\n            cursor: pointer;\r\n            width: 90%;\r\n            border-radius: 0.2rem;\r\n            padding: 0.4rem;\r\n            display: flex;\r\n            gap: 1rem;\r\n            align-items: center;\r\n            transition: 0.5s ease-out;\r\n\r\n            .avatar {\r\n                img {\r\n                    height: 3rem;\r\n                    width: 3rem;\r\n                }\r\n            }\r\n\r\n            .username {\r\n                h3 {\r\n                    color: white;\r\n                    font-size: 22px;\r\n                    text-transform: capitalize;\r\n                }\r\n            }\r\n        }\r\n\r\n        .selected {\r\n            background-color: #9a86f3;\r\n        }\r\n    }\r\n\r\n    .current-user {\r\n        background-color: #0d0d30;\r\n        display: flex;\r\n        justify-content: flex-start;\r\n        align-items: center;\r\n        gap: 2rem;\r\n\r\n        .avatar {\r\n            margin-left: 1.5rem;\r\n\r\n            img {\r\n                height: 4rem;\r\n                max-inline-size: 100%;\r\n            }\r\n        }\r\n\r\n        .username {\r\n            h1 {\r\n                color: white;\r\n                font-size: 27px;\r\n                padding-left: 2rem;\r\n                text-transform: capitalize;\r\n            }\r\n        }\r\n\r\n        a {\r\n            color: #4e0eff;\r\n            font-weight: bold;\r\n            text-decoration: none;\r\n            padding-right: 5px;\r\n        }\r\n\r\n        @media screen and (min-width: 720px) and (max-width: 1080px) {\r\n            gap: 0.5rem;\r\n            .username {\r\n                h2 {\r\n                    font-size: 1rem;\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n`;\r\nexport default Contacts;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\"\r\n\r\nfunction Welcome ({currentUser}) {\r\n    return(\r\n        <Container>\r\n            <h1>Welcome <span>{!(currentUser===undefined) && currentUser.username}</span></h1>\r\n            <h3>Please select chat to start messaging</h3>\r\n        </Container>\r\n    )\r\n}\r\nconst Container = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    color: white;\r\n    flex-direction: column;\r\n    img {\r\n        height: 20rem;\r\n    }\r\n    span {\r\n        color: #4e0eff;\r\n    }\r\n    h1{\r\n        font-size: 2rem;\r\n        text-transform: capitalize;\r\n    }\r\n    h3{\r\n        font-size: 1.5rem;\r\n    }\r\n`\r\nexport default Welcome;\r\n\r\n","import React, {useState} from 'react';\r\nimport styled from \"styled-components\";\r\nimport {IoMdSend} from \"react-icons/io\";\r\nimport {BsEmojiSmileFill} from \"react-icons/bs\";\r\nimport EmojiPicker from \"emoji-picker-react\";\r\n\r\nfunction ChatInput({handleSendMessage}) {\r\n    const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n    const [msg, setMsg] = useState(\"\")\r\n\r\n    const emojiPickerDisplay = () => {\r\n        setShowEmojiPicker((prevState)=> !prevState);\r\n    }\r\n    const handleEmojiClick = (emoji) => {\r\n        setMsg((prevMessage) => prevMessage + emoji.emoji);\r\n    }\r\n\r\n    const sendChat = (event) =>{\r\n        event.preventDefault();\r\n        if (msg.length > 0) {\r\n            handleSendMessage(msg);\r\n            setMsg('')\r\n\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"button-container\">\r\n                <div className=\"emoji\">\r\n                    <BsEmojiSmileFill onClick={emojiPickerDisplay}/>\r\n                    {\r\n                       showEmojiPicker &&\r\n                        <EmojiPicker onEmojiClick={(emojiData) =>\r\n                            handleEmojiClick(emojiData)}/>\r\n                    }\r\n                </div>\r\n            </div>\r\n            <form className=\"input-container\" action=\"\"\r\n                  onSubmit={event => sendChat(event) }>\r\n                <input className=\"input-container\" type=\"text\" placeholder=\"Type your message here\"\r\n                       onChange={(event) => {\r\n                           setMsg(event.target.value)\r\n                       }} value={msg}/>\r\n                <button className=\"submit\" type=\"submit\">< IoMdSend/></button>\r\n            </form>\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst Container = styled.div`\r\n    display: grid;\r\n    align-items: center;\r\n    grid-template-columns: 5% 95%;\r\n    background-color: #080420;\r\n    padding: 0 2rem;\r\n    @media screen and (min-width: 720px) and (max-width: 1080px) {\r\n        padding: 0 1rem;\r\n        gap: 1rem;\r\n    }\r\n\r\n    .button-container {\r\n        display: flex;\r\n        align-items: center;\r\n        color: white;\r\n        gap: 1rem;\r\n\r\n        .emoji {\r\n            position: relative;\r\n\r\n            svg {\r\n                font-size: 1.5rem;\r\n                color: #ffff00c8;\r\n                cursor: pointer;\r\n            }\r\n\r\n            .EmojiPickerReact {\r\n                position: absolute;\r\n                top: -29.5rem;\r\n                background-color: #080420;\r\n                box-shadow: 0 5px 10px #9a86f3;\r\n                border-color: #9a86f3;\r\n\r\n                .emoji-scroll-wrapper::-webkit-scrollbar {\r\n                    background-color: #080420;\r\n                    width: 5px;\r\n\r\n                    &-thumb {\r\n                        background-color: #9a86f3;\r\n                    }\r\n                }\r\n\r\n                .emoji-categories {\r\n                    button {\r\n                        filter: contrast(0);\r\n                    }\r\n                }\r\n\r\n                .emoji-search {\r\n                    background-color: transparent;\r\n                    border-color: #9a86f3;\r\n                }\r\n\r\n                .emoji-group:before {\r\n                    background-color: #080420;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    .input-container {\r\n        width: 100%;\r\n        border-radius: 2rem;\r\n        display: flex;\r\n        align-items: center;\r\n        gap: 2rem;\r\n        background-color: #ffffff34;\r\n\r\n        input {\r\n            width: 90%;\r\n            height: 60%;\r\n            background-color: transparent;\r\n            color: white;\r\n            border: none;\r\n            padding-left: 1rem;\r\n            font-size: 1.2rem;\r\n\r\n            &::selection {\r\n                background-color: #9a86f3;\r\n            }\r\n\r\n            &:focus {\r\n                outline: none;\r\n            }\r\n        }\r\n\r\n        button {\r\n            padding: 0.3rem 2rem;\r\n            border-radius: 2rem;\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n            background-color: #9a86f3;\r\n            border: none;\r\n            @media screen and (min-width: 720px) and (max-width: 1080px) {\r\n                padding: 0.3rem 1rem;\r\n                svg {\r\n                    font-size: 1rem;\r\n                }\r\n            }\r\n\r\n            svg {\r\n                font-size: 2rem;\r\n                color: white;\r\n            }\r\n        }\r\n    }\r\n`\r\nexport default ChatInput;","import  React, {useEffect, useRef, useState} from 'react';\nimport styled from \"styled-components\";\nimport axios from \"axios\";\nimport {toast} from \"react-toastify\";\nimport toastOptions from \"../config/toastOptions\";\nimport {getAllMessagesRoute, sendMsgRoute} from \"../config/APIRoutes\";\nimport ChatInput from \"./ChatInput\";\nimport {v4 as uuidv4} from \"uuid\"\nfunction ChatContainer({currentChat, currentUser, socket}) {\n    const [messages, setMessages] = useState([]);\n    const [arrivalMessage, setArrivalMessage] = useState(null);\n    const scrollRef = useRef();\n    useEffect(() => {\n        const allMessages = async () => {\n            const response = await axios.post(getAllMessagesRoute, {\n                from: currentUser._id,\n                to: currentChat._id\n            })\n            setMessages(response.data)\n        }\n        if (currentUser && currentChat) allMessages();\n    }, [currentChat]);\n\n    useEffect (() => {\n        if (socket.current) {\n            socket.current.on(\"msg-receive\", (msg) => {\n                setArrivalMessage({fromSelf: false, message: msg});\n            });\n        }\n    }, []);\n\n    useEffect(() => {\n        arrivalMessage && setMessages((prev) => [...prev, arrivalMessage]);\n    }, [arrivalMessage]);\n\n    useEffect(() => {\n        scrollRef.current?.scrollIntoView({behavior: \"smooth\"});\n    }, [messages]);\n\n    const handleSendMessage = async (msg) => {\n        const msgs = [...messages];\n        msgs.push({fromSelf: true, message: msg});\n        setMessages(msgs);\n/*\n        setMessages((prevState) => [...prevState, {fromSelf: true, message: msg}])\n*/\n        if (currentUser && currentChat) {\n            socket.current.emit(\"send-msg\", {\n                to: currentChat._id,\n                from: currentUser._id,\n                msg,\n            });\n            const {status} = await axios.post(sendMsgRoute, {\n                from: currentUser._id,\n                to: currentChat._id,\n                message: msg\n            })\n\n        }\n\n    }\n    return (\n        <Container>\n            <div className=\"chat-header\">\n                <div className=\"user-details\">\n                    <div className=\"avatar\">\n                        <img\n                            src={`data:image/svg+xml;base64, ${currentChat && currentChat.avatarImage}`}\n                            alt=\"chat avatar\"/>\n                    </div>\n                    <div className=\"username\">\n                        <h3>{currentChat && currentChat.username}</h3>\n                    </div>\n                </div>\n            </div>\n            <div className=\"chat-messages\">\n                {\n                    messages.map((message) => {\n                        return (\n                            <div key={uuidv4()} ref={scrollRef} >\n                                <div className={`message ${message.fromSelf === true ? \"sent\" : \"received\"}`}>\n                                    <div className=\"content\">\n                                        <p>{message.message}</p>\n                                    </div>\n                                </div>\n                            </div>)\n                    })\n                }\n            </div>\n            <ChatInput handleSendMessage={handleSendMessage}/>\n        </Container>\n    )\n}\n\nconst Container = styled.div`\n    display: grid;\n    grid-template-rows: 10% 80% 10%;\n    gap: 0.1rem;\n    overflow: hidden;\n    @media screen and (min-width: 720px) and (max-width: 1080px) {\n        grid-template-rows: 15% 70% 15%;\n    }\n\n    .chat-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 0 2rem;\n\n        .user-details {\n            display: flex;\n            align-items: center;\n            gap: 1rem;\n\n            .avatar {\n                img {\n                    height: 3rem;\n                }\n            }\n\n            .username {\n                h3 {\n                    color: white;\n                }\n            }\n        }\n    }\n\n    .chat-messages {\n        padding: 1rem 2rem;\n        display: flex;\n        flex-direction: column;\n        gap: 1rem;\n        overflow: auto;\n\n        &::-webkit-scrollbar {\n            width: 0.2rem;\n\n            &-thumb {\n                background-color: #ffffff39;\n                width: 0.1rem;\n                border-radius: 1rem;\n            }\n        }\n\n        .message {\n            display: flex;\n            align-items: center;\n\n            .content {\n                max-width: 40%;\n                overflow-wrap: break-word;\n                padding: 1rem;\n                font-size: 1.1rem;\n                border-radius: 1rem;\n                color: #d1d1d1;\n                @media screen and (min-width: 720px) and (max-width: 1080px) {\n                    max-width: 70%;\n                }\n            }\n        }\n\n        .sent {\n            justify-content: flex-end;\n\n            .content {\n                background-color: #4f04ff21;\n            }\n        }\n\n        .received {\n            justify-content: flex-start;\n\n            .content {\n                background-color: #9900ff20;\n            }\n        }\n    }\n`\nexport default ChatContainer;","import React, {useContext, useEffect, useRef, useState} from 'react';\r\nimport styled from 'styled-components';\r\nimport axios from \"axios\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {allUsersRoute, authenticationRoute, host, userDataRoute} from \"../config/APIRoutes\";\r\nimport Contacts from \"../Components/Contacts\";\r\nimport Welcome from \"../Components/Welcome\";\r\nimport ChatContainer from \"../Components/ChatContainer\";\r\nimport {io} from \"socket.io-client\";\r\nimport {AuthContext} from \"../context/authContext\";\r\nimport {useQuery} from \"@tanstack/react-query\";\r\n\r\nfunction Chat() {\r\n\r\n    const socket = useRef();\r\n    const navigate = useNavigate();\r\n    const [contacts, setContacts] = useState([]);\r\n    const [currentUser, setCurrentUser] = useState(undefined);\r\n    const [currentChat, setCurrentChat] = useState(undefined);\r\n    const {isAuthenticated, setIsAuthenticated} = useContext(AuthContext);\r\n\r\n    const setUser = async () => {\r\n        let userData = JSON.parse(localStorage.getItem(\"chat-app-user\"));\r\n\r\n        if (!userData) {\r\n            const {data} = await axios.get(userDataRoute, {withCredentials: true});\r\n            localStorage.setItem(\"chat-app-user\", JSON.stringify(data));\r\n            userData = data;\r\n        }\r\n        setCurrentUser(userData);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const authenticate = async () => {\r\n            if (isAuthenticated) {\r\n                await setUser();\r\n            } else {\r\n                const {data} = await axios.get(authenticationRoute, {withCredentials: true});\r\n                if (data.status) {\r\n                    await setUser();\r\n                    setIsAuthenticated(true);\r\n                } else {\r\n                    navigate(\"/login\");\r\n                }\r\n            }\r\n        };\r\n        authenticate();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (currentUser && !currentUser.isAvatarImageSet) {\r\n            navigate(\"/avatar\");\r\n        }\r\n\r\n    }, [currentUser, navigate]);\r\n\r\n    useEffect(() => {\r\n        if (currentUser) {\r\n            socket.current = io(host);\r\n            socket.current.emit(\"add-user\", currentUser._id);\r\n        }\r\n    }, [currentUser]);\r\n\r\n    const {data, error, isLoading} = useQuery({\r\n        queryKey: ['contacts'],\r\n        queryFn: async () => {\r\n            const {data} = await axios.get(`${allUsersRoute}/${currentUser._id}`);\r\n            return data;\r\n        },\r\n        enabled: !!(currentUser && currentUser.isAvatarImageSet && currentUser.username),\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (data) {\r\n            setContacts(data);\r\n        }\r\n    }, [data]);\r\n\r\n    const handleChatChange = (chat) => {\r\n        setCurrentChat(chat);\r\n    };\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"container\">\r\n                <Contacts contacts={contacts} currentUser={currentUser} changeChat={handleChatChange}/>\r\n                {currentUser && currentChat === undefined ? (\r\n                    <Welcome currentUser={currentUser} />\r\n                ) : (\r\n                    <ChatContainer currentChat={currentChat} currentUser={currentUser} socket={socket} />\r\n                )}\r\n            </div>\r\n        </Container>\r\n    );\r\n}\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: 100vh;\r\n    width: 100vw;\r\n    justify-content: center;\r\n    align-items: center;\r\n    gap: 1rem;\r\n    background-color: #131324;\r\n\r\n    .container {\r\n        height: 85vh;\r\n        width: 85vw;\r\n        background-color: #00000076;\r\n        display: grid;\r\n        grid-template-columns: 25% 75%;\r\n        @media screen and (min-width: 720px) and (max-width: 1080px) {\r\n            grid-template-columns: 40% 60%;\r\n        }\r\n    }\r\n`;\r\n\r\nexport default Chat;\r\n"],"names":["Button","styled","div","navigate","useNavigate","isAuthenticated","setIsAuthenticated","useContext","AuthContext","_jsxs","onClick","async","id","JSON","parse","localStorage","getItem","_id","axios","get","logoutRoute","withCredentials","status","clear","children","_jsx","BiPowerOff","Container","ProfileOptions","displayOptions","setDisplayOptions","useState","className","LuMenu","style","color","fontSize","Link","to","Logout","_ref","contacts","currentUser","changeChat","currentUserName","setCurrentUserName","undefined","currentUserImage","setCurrentUserImage","currentSelected","setCurrentSelected","useEffect","avatarImage","username","_Fragment","src","logo","alt","map","contact","index","changeCurrentChat","handleSendMessage","showEmojiPicker","setShowEmojiPicker","msg","setMsg","BsEmojiSmileFill","emojiPickerDisplay","prevState","EmojiPicker","onEmojiClick","emojiData","handleEmojiClick","emoji","prevMessage","action","onSubmit","event","preventDefault","length","sendChat","type","placeholder","onChange","target","value","IoMdSend","currentChat","socket","messages","setMessages","arrivalMessage","setArrivalMessage","scrollRef","useRef","response","post","getAllMessagesRoute","from","data","allMessages","current","on","fromSelf","message","prev","_scrollRef$current","scrollIntoView","behavior","ref","uuidv4","ChatInput","msgs","push","emit","sendMsgRoute","setContacts","setCurrentUser","setCurrentChat","setUser","userData","userDataRoute","setItem","stringify","authenticationRoute","authenticate","isAvatarImageSet","io","host","error","isLoading","useQuery","queryKey","queryFn","allUsersRoute","enabled","Contacts","chat","Welcome","ChatContainer"],"sourceRoot":""}